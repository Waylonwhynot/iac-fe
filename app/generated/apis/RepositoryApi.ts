/* tslint:disable */
/* eslint-disable */
/**
 * CodeBox API
 * Code Box
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedReleaseList,
  PaginatedRepositoryList,
  ReleaseSummary,
  Repository,
  RepositoryCreation,
  RepositoryMutation,
} from '../models/index';
import {
    PaginatedReleaseListFromJSON,
    PaginatedReleaseListToJSON,
    PaginatedRepositoryListFromJSON,
    PaginatedRepositoryListToJSON,
    ReleaseSummaryFromJSON,
    ReleaseSummaryToJSON,
    RepositoryFromJSON,
    RepositoryToJSON,
    RepositoryCreationFromJSON,
    RepositoryCreationToJSON,
    RepositoryMutationFromJSON,
    RepositoryMutationToJSON,
} from '../models/index';

export interface CreateRepositoryRequest {
    repositoryCreation: RepositoryCreation;
}

export interface DeleteRepositoryRequest {
    id: number;
}

export interface GetReleaseRequest {
    id: number;
}

export interface GetRelease2Request {
    id: number;
    release: string;
}

export interface GetRepositoryRequest {
    id: number;
}

export interface ListReleasesRequest {
    id: number;
    kw?: string;
    page?: number;
    size?: number;
}

export interface ListRepositoriesRequest {
    kw?: string;
    page?: number;
    size?: number;
}

export interface SyncReleasesRequest {
    id: number;
}

export interface UpdateRepositoryRequest {
    id: number;
    repositoryMutation?: RepositoryMutation;
}

/**
 * 
 */
export class RepositoryApi extends runtime.BaseAPI {

    /**
     */
    async createRepositoryRaw(requestParameters: CreateRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Repository>> {
        if (requestParameters['repositoryCreation'] == null) {
            throw new runtime.RequiredError(
                'repositoryCreation',
                'Required parameter "repositoryCreation" was null or undefined when calling createRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/repository/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RepositoryCreationToJSON(requestParameters['repositoryCreation']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RepositoryFromJSON(jsonValue));
    }

    /**
     */
    async createRepository(requestParameters: CreateRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Repository> {
        const response = await this.createRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteRepositoryRaw(requestParameters: DeleteRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/repository/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteRepository(requestParameters: DeleteRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRepositoryRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getReleaseRaw(requestParameters: GetReleaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReleaseSummary>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRelease().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/release/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReleaseSummaryFromJSON(jsonValue));
    }

    /**
     */
    async getRelease(requestParameters: GetReleaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReleaseSummary> {
        const response = await this.getReleaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRelease2Raw(requestParameters: GetRelease2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReleaseSummary>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRelease2().'
            );
        }

        if (requestParameters['release'] == null) {
            throw new runtime.RequiredError(
                'release',
                'Required parameter "release" was null or undefined when calling getRelease2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['release'] != null) {
            queryParameters['release'] = requestParameters['release'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/repository/{id}/release/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReleaseSummaryFromJSON(jsonValue));
    }

    /**
     */
    async getRelease2(requestParameters: GetRelease2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReleaseSummary> {
        const response = await this.getRelease2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRepositoryRaw(requestParameters: GetRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Repository>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/repository/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RepositoryFromJSON(jsonValue));
    }

    /**
     */
    async getRepository(requestParameters: GetRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Repository> {
        const response = await this.getRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listReleasesRaw(requestParameters: ListReleasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedReleaseList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listReleases().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['kw'] != null) {
            queryParameters['kw'] = requestParameters['kw'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/repository/{id}/releases/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedReleaseListFromJSON(jsonValue));
    }

    /**
     */
    async listReleases(requestParameters: ListReleasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedReleaseList> {
        const response = await this.listReleasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listRepositoriesRaw(requestParameters: ListRepositoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRepositoryList>> {
        const queryParameters: any = {};

        if (requestParameters['kw'] != null) {
            queryParameters['kw'] = requestParameters['kw'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/repository/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRepositoryListFromJSON(jsonValue));
    }

    /**
     */
    async listRepositories(requestParameters: ListRepositoriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRepositoryList> {
        const response = await this.listRepositoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async syncReleasesRaw(requestParameters: SyncReleasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling syncReleases().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/repository/{id}/sync_releases/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async syncReleases(requestParameters: SyncReleasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.syncReleasesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateRepositoryRaw(requestParameters: UpdateRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RepositoryMutation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateRepository().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/repository/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RepositoryMutationToJSON(requestParameters['repositoryMutation']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RepositoryMutationFromJSON(jsonValue));
    }

    /**
     */
    async updateRepository(requestParameters: UpdateRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RepositoryMutation> {
        const response = await this.updateRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
