/* tslint:disable */
/* eslint-disable */
/**
 * CodeBox API
 * Code Box
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedPeriodicMissionList,
  PeriodicMission,
  PeriodicMissionCreation,
  PeriodicMissionMutation,
} from '../models/index';
import {
    PaginatedPeriodicMissionListFromJSON,
    PaginatedPeriodicMissionListToJSON,
    PeriodicMissionFromJSON,
    PeriodicMissionToJSON,
    PeriodicMissionCreationFromJSON,
    PeriodicMissionCreationToJSON,
    PeriodicMissionMutationFromJSON,
    PeriodicMissionMutationToJSON,
} from '../models/index';

export interface CreatePeriodicMissionRequest {
    periodicMissionCreation: Omit<PeriodicMissionCreation, 'id'|'created_at'|'updated_at'|'deleted_at'|'created_by'|'updated_by'|'deleted_by'>;
}

export interface DeletePeriodicMissionRequest {
    id: number;
}

export interface GetPeriodicMissionRequest {
    id: number;
}

export interface ListPeriodicMissionsRequest {
    kw?: string;
    page?: number;
    size?: number;
}

export interface UpdatePeriodicMissionRequest {
    id: number;
    periodicMissionMutation?: PeriodicMissionMutation;
}

/**
 * 
 */
export class ScheduleApi extends runtime.BaseAPI {

    /**
     */
    async createPeriodicMissionRaw(requestParameters: CreatePeriodicMissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PeriodicMission>> {
        if (requestParameters['periodicMissionCreation'] == null) {
            throw new runtime.RequiredError(
                'periodicMissionCreation',
                'Required parameter "periodicMissionCreation" was null or undefined when calling createPeriodicMission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/schedule/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PeriodicMissionCreationToJSON(requestParameters['periodicMissionCreation']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PeriodicMissionFromJSON(jsonValue));
    }

    /**
     */
    async createPeriodicMission(requestParameters: CreatePeriodicMissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PeriodicMission> {
        const response = await this.createPeriodicMissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deletePeriodicMissionRaw(requestParameters: DeletePeriodicMissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePeriodicMission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/schedule/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deletePeriodicMission(requestParameters: DeletePeriodicMissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePeriodicMissionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getPeriodicMissionRaw(requestParameters: GetPeriodicMissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PeriodicMission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPeriodicMission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/schedule/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PeriodicMissionFromJSON(jsonValue));
    }

    /**
     */
    async getPeriodicMission(requestParameters: GetPeriodicMissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PeriodicMission> {
        const response = await this.getPeriodicMissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listPeriodicMissionsRaw(requestParameters: ListPeriodicMissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPeriodicMissionList>> {
        const queryParameters: any = {};

        if (requestParameters['kw'] != null) {
            queryParameters['kw'] = requestParameters['kw'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/schedule/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPeriodicMissionListFromJSON(jsonValue));
    }

    /**
     */
    async listPeriodicMissions(requestParameters: ListPeriodicMissionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPeriodicMissionList> {
        const response = await this.listPeriodicMissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePeriodicMissionRaw(requestParameters: UpdatePeriodicMissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PeriodicMission>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatePeriodicMission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerTokenAuthentication", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/iac/schedule/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PeriodicMissionMutationToJSON(requestParameters['periodicMissionMutation']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PeriodicMissionFromJSON(jsonValue));
    }

    /**
     */
    async updatePeriodicMission(requestParameters: UpdatePeriodicMissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PeriodicMission> {
        const response = await this.updatePeriodicMissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
