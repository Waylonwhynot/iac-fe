/* tslint:disable */
/* eslint-disable */
/**
 * CodeBox API
 * Code Box
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Release
 */
export interface Release {
    /**
     * 
     * @type {number}
     * @memberof Release
     */
    readonly id: number;
    /**
     * 
     * @type {Date}
     * @memberof Release
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Release
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Release
     */
    readonly deletedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Release
     */
    readonly versionName: string;
    /**
     * 
     * @type {string}
     * @memberof Release
     */
    archiveUrl: string;
    /**
     * 
     * @type {number}
     * @memberof Release
     */
    major: number;
    /**
     * 
     * @type {number}
     * @memberof Release
     */
    minor: number;
    /**
     * 
     * @type {number}
     * @memberof Release
     */
    micro: number;
    /**
     * 
     * @type {string}
     * @memberof Release
     */
    commit: string;
    /**
     * 
     * @type {number}
     * @memberof Release
     */
    repository: number;
}

/**
 * Check if a given object implements the Release interface.
 */
export function instanceOfRelease(value: object): value is Release {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('deletedAt' in value) || value['deletedAt'] === undefined) return false;
    if (!('versionName' in value) || value['versionName'] === undefined) return false;
    if (!('archiveUrl' in value) || value['archiveUrl'] === undefined) return false;
    if (!('major' in value) || value['major'] === undefined) return false;
    if (!('minor' in value) || value['minor'] === undefined) return false;
    if (!('micro' in value) || value['micro'] === undefined) return false;
    if (!('commit' in value) || value['commit'] === undefined) return false;
    if (!('repository' in value) || value['repository'] === undefined) return false;
    return true;
}

export function ReleaseFromJSON(json: any): Release {
    return ReleaseFromJSONTyped(json, false);
}

export function ReleaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Release {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'deletedAt': (new Date(json['deleted_at'])),
        'versionName': json['version_name'],
        'archiveUrl': json['archive_url'],
        'major': json['major'],
        'minor': json['minor'],
        'micro': json['micro'],
        'commit': json['commit'],
        'repository': json['repository'],
    };
}

export function ReleaseToJSON(value?: Omit<Release, 'id'|'created_at'|'updated_at'|'deleted_at'|'version_name'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'archive_url': value['archiveUrl'],
        'major': value['major'],
        'minor': value['minor'],
        'micro': value['micro'],
        'commit': value['commit'],
        'repository': value['repository'],
    };
}

