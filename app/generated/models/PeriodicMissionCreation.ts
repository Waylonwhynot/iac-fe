/* tslint:disable */
/* eslint-disable */
/**
 * CodeBox API
 * Code Box
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserSummary } from './UserSummary';
import {
    UserSummaryFromJSON,
    UserSummaryFromJSONTyped,
    UserSummaryToJSON,
} from './UserSummary';
import type { Crontab } from './Crontab';
import {
    CrontabFromJSON,
    CrontabFromJSONTyped,
    CrontabToJSON,
} from './Crontab';
import type { Interval } from './Interval';
import {
    IntervalFromJSON,
    IntervalFromJSONTyped,
    IntervalToJSON,
} from './Interval';

/**
 * 
 * @export
 * @interface PeriodicMissionCreation
 */
export interface PeriodicMissionCreation {
    /**
     * 
     * @type {number}
     * @memberof PeriodicMissionCreation
     */
    readonly id: number;
    /**
     * 
     * @type {Date}
     * @memberof PeriodicMissionCreation
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof PeriodicMissionCreation
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof PeriodicMissionCreation
     */
    readonly deletedAt: Date;
    /**
     * 
     * @type {UserSummary}
     * @memberof PeriodicMissionCreation
     */
    readonly createdBy: UserSummary;
    /**
     * 
     * @type {UserSummary}
     * @memberof PeriodicMissionCreation
     */
    readonly updatedBy: UserSummary;
    /**
     * 
     * @type {UserSummary}
     * @memberof PeriodicMissionCreation
     */
    readonly deletedBy: UserSummary;
    /**
     * 
     * @type {Interval}
     * @memberof PeriodicMissionCreation
     */
    interval?: Interval;
    /**
     * 
     * @type {Crontab}
     * @memberof PeriodicMissionCreation
     */
    crontab?: Crontab;
    /**
     * 
     * @type {number}
     * @memberof PeriodicMissionCreation
     */
    release: number;
    /**
     * 
     * @type {string}
     * @memberof PeriodicMissionCreation
     */
    playbook?: string;
    /**
     * 
     * @type {string}
     * @memberof PeriodicMissionCreation
     */
    role?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PeriodicMissionCreation
     */
    tags?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PeriodicMissionCreation
     */
    inventories?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PeriodicMissionCreation
     */
    envvars?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PeriodicMissionCreation
     */
    extravars?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PeriodicMissionCreation
     */
    forks?: number;
    /**
     * 
     * @type {number}
     * @memberof PeriodicMissionCreation
     */
    timeout?: number;
    /**
     * 
     * @type {string}
     * @memberof PeriodicMissionCreation
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof PeriodicMissionCreation
     */
    enabled?: boolean;
}

/**
 * Check if a given object implements the PeriodicMissionCreation interface.
 */
export function instanceOfPeriodicMissionCreation(value: object): value is PeriodicMissionCreation {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('deletedAt' in value) || value['deletedAt'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('updatedBy' in value) || value['updatedBy'] === undefined) return false;
    if (!('deletedBy' in value) || value['deletedBy'] === undefined) return false;
    if (!('release' in value) || value['release'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function PeriodicMissionCreationFromJSON(json: any): PeriodicMissionCreation {
    return PeriodicMissionCreationFromJSONTyped(json, false);
}

export function PeriodicMissionCreationFromJSONTyped(json: any, ignoreDiscriminator: boolean): PeriodicMissionCreation {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'deletedAt': (new Date(json['deleted_at'])),
        'createdBy': UserSummaryFromJSON(json['created_by']),
        'updatedBy': UserSummaryFromJSON(json['updated_by']),
        'deletedBy': UserSummaryFromJSON(json['deleted_by']),
        'interval': json['interval'] == null ? undefined : IntervalFromJSON(json['interval']),
        'crontab': json['crontab'] == null ? undefined : CrontabFromJSON(json['crontab']),
        'release': json['release'],
        'playbook': json['playbook'] == null ? undefined : json['playbook'],
        'role': json['role'] == null ? undefined : json['role'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'inventories': json['inventories'] == null ? undefined : json['inventories'],
        'envvars': json['envvars'] == null ? undefined : json['envvars'],
        'extravars': json['extravars'] == null ? undefined : json['extravars'],
        'forks': json['forks'] == null ? undefined : json['forks'],
        'timeout': json['timeout'] == null ? undefined : json['timeout'],
        'name': json['name'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
    };
}

export function PeriodicMissionCreationToJSON(value?: Omit<PeriodicMissionCreation, 'id'|'created_at'|'updated_at'|'deleted_at'|'created_by'|'updated_by'|'deleted_by'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'interval': IntervalToJSON(value['interval']),
        'crontab': CrontabToJSON(value['crontab']),
        'release': value['release'],
        'playbook': value['playbook'],
        'role': value['role'],
        'tags': value['tags'],
        'inventories': value['inventories'],
        'envvars': value['envvars'],
        'extravars': value['extravars'],
        'forks': value['forks'],
        'timeout': value['timeout'],
        'name': value['name'],
        'enabled': value['enabled'],
    };
}

